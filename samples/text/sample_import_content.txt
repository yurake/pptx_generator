- このプロジェクトは営業資料の自動生成を本気でやり切るために立ち上がったけれど、pptx を手で直す時間がまだまだ多いという現場のぼやきが常に聞こえてくるので、その痛みを解消する仕掛けをどれだけ早く届けられるかが勝負だと思っている。
- 生成AIを組み込むと言いつつも、結局ヒューマンレビューの工程3がボトルネックになるのではないかという懸念が強く、承認ログと監査メタが後でちゃんと追跡できるように設計しないと失敗する予感しかしない。
- コンテンツの正規化では Markdown や PDF、URL からの取り込みをサポートしているが、実案件では PowerPoint と Excel の断片が飛び交うので、将来的には Office ファイルの直接解析も視野に入れておきたいという声がある。
- ブランドの統一感を保つために config/branding.json を参照する仕組みを入れたが、結局テンプレート側の図形設定を現場がいじり倒すので、レイアウトの意図を JSON 仕様に固定する方が再現性が高いはずだと個人的には考えている。
- `pptx content` コマンドを使い倒したメンバーからは、AI 生成モードと外部入力モードをもっと柔軟に切り替えたいという要望が出ていて、CLI オプションの組み合わせチェックを単純化する必要がありそうだというメモが Slack に流れていた。
- サンプルデータの管理方針は docs/AGENTS.md に書いてあるものの、誰も細かく読んでいないので、テストが勝手に落ちたタイミングで初めてルールを確認するという本末転倒な運用になっている。
- アウトライン生成と最終 PPTX 生成の間でデータ構造が微妙に異なる点があり、工程3の出力が工程4で崩れるケースがあるから、`content_approved.json` のスキーマを今のうちに固めておかないと将来の互換性問題に悩まされそうだ。
- LibreOffice の headless 実行を CI で走らせると sporadic に失敗するので、PDF 変換を任意チェックにしているが、そのまま運用に入ると手元では動いたのに本番でこけるパターンが目に見えているから、フォールバックの runbook をちゃんと docs/runbooks に書きたい。
- プロンプトテンプレートは `src/pptx_generator/content_ai/prompts.py` に詰め込んでいるものの、文言を編集するとテストの期待値がほぼ全部変わるので、テストデータを固定化するためにモックレスポンスを再生成するスクリプトが必要だと感じている。
- LLM プロバイダーの切り替えは環境変数で制御する方針だが、プロジェクト参加者がそれぞれ別のクラウドを使うため、.env の共有が追いつかずに「mock でしか試していません」という状況が続きがちで、品質評価が進みにくい。
- Review Engine と Analyzer を繋ぐ話が sprinter ミーティングで議題に上がったのに、連携仕様を詰める前に RM-041 へ移ってしまい、気づいたら backlog の奥に眠っていたという歴史があり、同じことを繰り返さないようにタスク管理を厳密にしたい。
- CLI の verbose ログではリクエストとレスポンスの概要しか出ていないが、開発メンバーはプロンプト全文を比較したがっており、しかし監査ポリシー的には全文保存が難しいというジレンマを抱えている。
- `samples/json/sample_jobspec.json` はストーリーが割ときれいに整理されているが、実際の案件はもっと混沌としているので、ラフな文章を投げ込んでもそれなりにスライドへ落とし込める補正ロジックを入れたいという要求が PM 側から出ている。
- PoC で得られた学びとして、AI 生成した本文をそのまま顧客へ見せるとトーンの不一致が起きるので、ブランドガイドラインに沿った表現ゆれを制御するルールを ContentAIPolicy に盛り込む必要があると感じた。
- 監査ログの整備は構想レベルでは進んでいるものの、実装時間が足りずに AI 生成ログとレビューアクションを突き合わせる解析ツールがまだないため、手作業でクロスチェックする地味な作業が続いている。
- CLI で複数の `--content-source` を指定したときに順番制御が効いているかどうかを再確認したいが、テストケースがワンパターンなので、もっとバリエーションを増やして競合解決の挙動を記録したい。
- 現行テンプレートのアンカー名が JSON の `anchor` 指定と噛み合っていない箇所がまだ残っており、生成結果を適用すると PowerPoint 側でレイアウト崩れが起きるという報告が何度か来ているので、テンプレート管理のガバナンスを再整理したい。
- エージェント連携を見据えて CLI をマイクロサービス化したいという声があるが、今のところ monorepo の Python コードに収まっているので、分割するなら API 層の共通ライブラリを整えてからが良いというアーキ議論が出ている。
- プロジェクトのロードマップでは RM-040 が完了扱いになっているものの、実際には LLM プロバイダー統合の検証が少し残っており、特に AWS Claude については認証周りの検証が未着手なので、ToDo の棚卸しをする必要がある。
- 生成AI導入で一番怖いのは責任分界点が曖昧になることで、営業が AI 出力をそのまま顧客に渡すとルール違反になるが、運用フローの説明がまだ十分に広まっていないので、教育用のプレゼンも並行して用意しなければいけない。
- CLI での Spec 差し替えが誰でもできるようになった結果、承認前のドラフトが大量に生成され、保存先ディレクトリ `.pptx/content/` が膨れ上がって整理できなくなるので、クリーンアップ用スクリプトを付けた方がいいのではと感じている。
- Analyzer との接続実装が後回しになっているため、現状の AI 生成コンテンツはレビューの質にばらつきがあり、本番導入前に最低限の検証スイートを作るべきだという QA チームのコメントが溜まっている。
- CLI を Windows で使うメンバーが一定数いて、`uv` の導入手順が macOS 前提で書かれていることが混乱の元になっているため、環境構築ガイドを OS 別に分ける必要があるという話題がチーム内で出ていた。
- ストレージ戦略として S3 互換のオブジェクトストアに成果物を保存する案があるが、現状はローカルディレクトリだけを想定しているため、アクセス権やファイル命名規則をどうするか議論が進んでいない。
- プレゼン資料の翻訳需要が高まってきており、多言語対応を想定したレイアウトとフォント管理を早めに検討したいが、テンプレート更新のコストが高くて着手できていないというジレンマがある。
- CLI のサブコマンドが増えてきた結果、`uv run pptx --help` の出力が長くなりすぎて初心者が追いつけなくなっており、用途別にガイドを分けるか、インタラクティブモードを作るか議論しているが、まだ決めかねている。
- プロジェクト全体としては PPTX 生成と AI オーケストレーションを組み合わせた革新的なワークフローを目指しているが、結局は人の手戻りを減らせるかどうかに尽きるので、工程3の入力品質を上げる地味な作業が成功への近道だと思っている。
- PPTX の自動生成を語るとき、最終的に営業担当がスライドを微調整したくなる衝動をどう抑えるかという議論が尽きないが、それを完全に禁止すると現場の創造性が死ぬので、どこまで AI の自由度を許容し、どこから人が手を入れて良いのかを定量化する評価指標が欲しいと感じている。
- 企画初期のワークショップでは、コンテンツ正規化のチームとテンプレート設計チームの目線が全く合っておらず、JSON スキーマのフィールド名に対する認識齟齬が多発していたので、用語集を docs/glossary に置きたいという声が立て続けに届いている。
- LLM ガバナンス委員会からは、各プロバイダーごとにプロンプトと応答を保存する際の取り扱い規定をまとめてほしいと言われているが、まだドラフトの段階で止まっているため、.env サンプルと合わせて注意事項を記載する案も出ている。
- 分析チームが提案する KPI と営業部門が求める KPI が噛み合わず、レビューリードタイムや差戻し率の定義ですら議論が平行線をたどっているので、AI 生成ワークフローのメトリクス体系を定義するワーキンググループを作った方がいいという意見がある。
- CLI のエラーコード設計が統一されておらず、`Exit code 4` が多義的になってしまっている影響でサポート対応が滞るケースがあるから、ContentAI 関連と Import 関連でコード体系を分ける案がアーキ部会で検討されている。
- 現状のテストカバレッジは content_ai モジュール周辺で伸びてきているものの、PDF 取込の統合テストは環境依存が強すぎて CI から除外されており、ローカル検証の結果がしばしば共有されないという課題が残っている。
- プロジェクトマネージャーは AI の導入で見積もり精度が上がると期待しているが、実際にはレビュー待ちのキュー長がボトルネックで、生成工程だけ速くなっても納期短縮に直結しないという現実が数値で示されつつある。
- `samples/json/sample_content_review_log.json` の更新が止まるとレビュー工程のテストが脆弱になるため、定期的に新しいシナリオを追加しようという提案が上がったが、誰が責任を持つのか決まらずに放置気味である。
- `src/pptx_generator/content_ai/orchestrator.py` ではログを INFO レベルで吐き出しているが、監査チームからは DEBUG レベルでも細かい内部状態がほしいと言われており、しかしログ量が増えると SRE のコストが跳ね上がるので方針が決めきれていない。
- CLI を Docker 化する案が浮上したものの、LibreOffice の依存が重く、イメージサイズが肥大化するため採用を見送った経緯があり、代替として VS Code Devcontainer を整備する話が持ち上がっている。
- 工程3の PoC で顧客へ見せたデモが好評だった一方、生成 AI のレスポンスタイムが想定より長く、ミーティング中の実行には向かないというフィードバックがあり、キャッシュを導入するかどうか検討中である。
- AI プロンプトに含まれる社外秘表現の扱いが難しく、ContentAIPolicy 構成に禁則語リストを追加するアイデアがあるが、どのレベルで警告に留めるか自動ブロックするかの線引きがまだ曖昧だ。
- テンプレート `samples/templates/templates.pptx` に追加されたタイムラインレイアウトが人気だが、AI 生成テキストでは時間軸に沿った書き方が弱いため、専用のプロンプトを用意したいというアイデアを抱えている。
- `docs/runbooks/release.md` にも記載されている通り、リリース前には AI 生成ログと承認ログの突き合わせをすることになっているが、その比較作業が手作業で 2 時間以上かかるため、自動化スクリプトを整備したい。
- `config/content_ai_policies.json` のバージョン管理が難しく、ポリシー更新時にどのスライドが影響を受けたのか可視化できていないので、メタ情報にポリシーのハッシュを含める案を検討中である。
- デザインチームから「AI が生成した bullet の語尾が毎回同じで単調だ」という苦情があり、言い換え候補を自動提案する `phrasing_variants` のような仕組みを追加したいと考えている。
- `tests/test_cli_integration.py` の実行時間が徐々に伸びており、全体テストで 4 分を超えると開発速度が落ちるので、内容を分割するかファイル比較をハッシュベースにするか議論が続いている。
- オーケストレーターのログに含まれる `warnings` の粒度が粗く、実際には本文行数超過と JSON パース失敗がまとめて扱われているので、警告タイプごとに出力を分離してユーザーが後処理しやすくする必要がある。
- プロジェクトの Slack チャンネルでは、生成 AI が作ったスライド案を人力で再編集した事例が頻繁に共有され、改善案を示すことで開発チームがバックログを優先順位付けできるようになってきている。
- Analyzer 連携が未整備のまま RM-042 に進むと、情報ギャップ分析と生成 AI の出力が矛盾するリスクがあるので、工程3での品質ゲートに Analyzer からのフィードバックを部分的に取り込む方針を再検討したい。
- テストデータのメンテナンスを効率化するため、サンプル JSON から Spec を逆生成する `reverse_engineer.py` PoC を進めようという提案があるが、まだリポジトリに入れる段階ではなく、個人ブランチで試行している状態である。
- プロジェクトの説明資料では、生成 AI と HITL のハイブリッド運用を強調しているが、顧客によっては AI 利用に拒否感があるため、AI をオプトイン方式で段階導入できる構成が望ましいという営業の声がある。
- CLI のロギング設定で `--debug` を新設したものの、ユーザーが `-v --debug` を同時指定したときの挙動が直感的かどうか疑問視されており、ヘルプ文言をもっと丁寧に書くべきではないかと提案された。
- 生成コンテンツの保存形式を JSON から YAML に切り替えたいという声もあったが、既存のテストや後工程との互換性を考えるとメリットが少なく、当面は JSON 維持で落ち着いている。
- エラー発生時に `audit_log.json` へ記録する仕様を検討中だが、ログが肥大化するとローテーション管理が課題になるので、S3 連携を前提にしたアーカイブ戦略を設計したい。
- `docs/policies/task-management.md` に定めた Approval-First ポリシーを守るのが難しく、特に突発的なバグ修正で手順を飛ばしがちなので、自動リマインダーを Slack Bot に実装する案が浮上している。
- DevOps 観点では、CLI の実行を GitHub Actions で自動検証するパイプラインが必要だが、LibreOffice のセットアップが重くて着手できていないため、代替として PDF 変換をモック化する意見もある。
- `docs/notes/20251023-roadmap-theme-research.md` で収集したユーザー調査によると、社内で PPTX のバージョン管理ができていない組織が多く、生成 AI が出力したファイルをどうやって正式化するかが重要な論点になっている。
- 生成 AI のレスポンスに含まれる数値が時折不正確なため、工程3で数値の整合チェックを自動化したいが、ビジネスロジックによって許容差が異なるので一律の判定が難しいという課題がある。
- CLI の入力 JSON に含まれる `story` 情報が工程4でしか使われない現状を変え、工程3でもストーリー整合性のヒントとして活用するアイデアがあるが、処理が複雑になりすぎる懸念が出ている。
- プロジェクトメンバーの中には、最終的に Web ベースの UI を整備して CLI を裏方に回したいと考えている人もおり、API 設計を先行して固める必要があるという議論が活発化している。
- AI 生成の結果を翻訳するニーズに対応するため、DeepL や Azure Translator など外部サービスとの連携案が挙がっているが、機密情報の取り扱いをどうするかがクリアになっていない。
- 社内監査部門からは、生成 AI を利用した際の責任分界点を文書化するよう求められており、`docs/policies/config-and-templates.md` に追記するタスクが backlog に追加された。
- CLI を通じて生成された成果物が `.pptx/gen/` と `.pptx/content/` に分散するため、利用者がどこを見れば良いか迷うケースが多く、成果物の命名規則とディレクトリ構成を再考したい。
- `samples/new/sample_spec_extended.json` のような大規模サンプルは保守コストが高いので、差分生成スクリプトを作って自動的に更新できるようにする案が出ている。
- Mac と Windows でフォントレンダリングが異なる影響で、PPTX の最終見た目が変わってしまう問題がくすぶっており、ブランドチームからフォント指定の厳格化を求められている。
- エージェントベースのワークフローを実験しているチームから、プレーンテキストの大量 bullet を AI に渡しても整ったスライドに変換できるか試したいという要望があり、このサンプルファイルがその実験材料になることを期待している。
- spec と content の差分検出をもっと見やすくするために、`diff --word-diff` のような表示を CLI に組み込む案があるが、実装コストが高いので後回しになりがちだ。
- `docs/roadmap/roadmap.md` の更新が運用に追いつかないとロードマップの信頼性が落ちるので、PR 作成時に自動で該当セクションをチェックするリントを導入したいと考えている。
- プロジェクト内で使われる AI モデルのパラメータが散逸しがちなので、`ai_generation_meta.json` に記録する情報を標準化し、再現性を確保する仕組みが求められている。
- boto3 ベースで Bedrock を叩くコードはまだ未実装だが、設定項目だけ先に入れているため、新しく入ったメンバーが混乱しないよう README に注意書きを追加したいと感じている。
- CLI ヘルプに日本語と英語を混在させるか悩んでいたが、国際チームからは英語で統一してほしいと言われ、日本チームからは日本語を残してほしいと言われる板挟み状態が続いている。
- プロジェクトの Wiki を残すべきか Git リポジトリ内の Markdown に統一すべきか議論が分かれており、検索性を考えると社内 Confluence との連携も視野に入れたいという意見がある。
- CLI の入力 JSON から無効なフィールドを削除する正規化処理が将来的に必要になるかもしれないが、今は Spec 側で整合を取る前提にしている。
- プレゼン資料のセクション境界を AI にどう認識させるかが課題で、`slide.intent` がもっとリッチなタグを持てば改善できるのではないかという議論が続いている。
- RAG を使って既存資料を参照する機能が欲しいという案件が増えており、`samples/text/sample_import_content.txt` のようなノイズ混じりのテキストを RAG 素材にして精度を検証したいと考えているメンバーもいる。
- 運用チームからは、AI が出力した本文に誤字が混じることが稀にあるので、校正 API を挟みたいという提案があったが、外部サービスにデータを送るリスクをどう管理するかという課題が残っている。
- CLI の結果ファイルを SharePoint に自動アップロードする要望があり、Microsoft Graph API 連携が backlog に追加されたが、優先度はそこまで高くない。
- プレゼン資料の冒頭に入れるべき要素（背景、課題、解決策、期待効果）の順番がチームごとに異なり、AI が違う順序で出力すると混乱するので、ポリシーで順序制約を設定する案が検討されている。
- `samples/assets` の画像を増やしたいが、著作権フリー素材のライセンス確認に時間がかかるので、手元のイラストを簡単に共有できる共通ストレージが欲しいと感じている。
- 生成AIのレスポンスに含まれる引用情報をどう扱うかが課題で、出典を明示するためのフィールドを ContentAIPolicy に追加するか検討している。
- CLI を GitHub Copilot や他のエージェントと連携させたいという野望があり、API エンドポイント化に対する期待が高まっているが、まずは CLI の安定化が最優先だと認識している。
- プロジェクトで採用している `uv` ベースの環境管理に慣れていないメンバーが多く、`python -m venv` 派からの抵抗もあるため、導入教育を今後強化する予定である。
- 工程3のプロンプト生成に関するノウハウが属人化しているので、`docs/notes/` 配下でシリーズ化してまとめようというアイデアが出ている。
- 生成 AI の結果が営業用語に偏りすぎるとテクニカルメンバーが理解しづらいので、用途別に語彙制御をする辞書機能が欲しい。
- CLI から生成される JSON が巨大化すると差分レビューが難しくなるため、要点だけを抜き出すサマリを自動生成する仕組みを検討している。
- PPTX のマスター構造が古いままだと最新テンプレートへ移行できないので、テンプレート更新手順を簡略化するスクリプトを作りたい。
- Content Import Service のエラーに関するユーザーガイドがまだ整備されていないため、よくある失敗例を `docs/runbooks/content-import-troubleshooting.md` にまとめたいという案がある。
- 内部監査の観点では、AI の利用履歴を誰が承認したのか追跡できるようにする必要があり、`content_review_log.json` に承認者の役職情報を追加したいと話題になった。
- 生成AIとテンプレートの整合を確認する「ドライラン」モードがあると便利だという意見があり、出力を行わずにログだけ確認できる機能を CLI に追加するか検討している。
- プロジェクトが進むにつれ、生成した PPTX をそのまま営業現場に渡すことが増えたので、ブランドチェックの自動化が急務になっている。
- 内容の更新履歴を追いやすくするために、AI が生成した本文に対して Git の差分を取る仕組みを作れないかという議論が出ている。
- AI 生成のアウトプットが長文になりがちなため、箇条書きを自動圧縮するルールを導入したいが、どこまで省略すると価値が損なわれるか判断が難しい。
- CLI を使わずに Python API として呼び出したいという要望があり、`src/pptx_generator/__init__.py` に公開関数を増やす話が持ち上がっている。
- 勘所として、AI の提案はあくまでドラフトであり、最終判断は人が行うという原則が浸透しているか随時確認する必要がある。
- エージェントとの連携を見据えて、将来的に CLI を非同期実行に対応させたいという要望があるが、現在の実装は同期処理を前提にしている。
- 生成された `ai_generation_meta.json` を BI ツールにロードして可視化する実験が進んでおり、将来的にはダッシュボード化して経営層へ提供したいという構想がある。
- サンプルの bullet が雑に長文で並んでいるのは意図的で、生成 AI がどれだけ整形できるかを測るためであるというメモを残しておきたい。
- プロジェクトのコミュニケーションでは、GitHub Issue と Slack の両方が使われているが、情報が分散しがちなので、ToDo テンプレートのチェックリストをもっと強制力のある形で運用したい。
- CLI のバージョン管理を semantic versioning で行うか、ロードマップのマイルストーンに合わせるか議論が続いている。
- Jupyter Notebook から CLI を呼び出す方法を知りたいという新規メンバーが多く、ノートブック用のサンプルを `samples/notebooks/` に置こうという話がある。
- 多言語対応では右から左へ書く言語の扱いも考慮する必要があり、テンプレートのテキストボックス設定を柔軟にする必要が出てくる可能性がある。
- AI 生成のトーンがフォーマルすぎると感じるユーザーもいて、`tone` パラメータをポリシーに追加したいが、モデルごとのサポート状況を調査する必要がある。
- このサンプルテキストは将来的に自動生成される可能性があり、今は手書きで雑な箇条書きを並べているが、エージェントがどこまで補正できるかを見る実験台として機能する。
