- ブランド統一を中核に、テンプレート版管理とOpen XML仕上げを連動させ、Analyzerの逸脱検知とPolisherの自動補正で社内配布物のデザインばらつきをなくし、ブランドガイドライン改定の履歴も監査ログで追跡できるように設計されている。
- 営業とコンサルの夜間ジョブ投入を想定し、LLMアウトライン生成からHITL承認、マッピング、レンダリング、PDF化、通知までを一気通貫のバッチで回し、翌朝にはレビュー可能な提案書が揃いステークホルダーへ自動配信される世界を描いている。
- JSON仕様はスライド粒度でレイアウト、段落レベル、アンカー名、補助メディアヒントを抱え、Validatorで禁則・数値整合・表記揺れを抑え、外部システムとのAPI連携でも迷わない入力品質を保証する共通インターフェースとして機能する。
- CLI中心運用と`uv run`による統一エントリーポイントでMac/Linux/Windows差異を吸収し、Python3.12仮想環境と.NET 8 SDK、LibreOffice headlessのセットアップ手順をドキュメント化して、現場導入の初期コストと環境トラブルを最小化する方針が明示されている。
- Analyzerは余白・フォントサイズ・コントラスト・グリッドずれをメトリクス化し、Refinerが安全閾値内のAuto-fixを適用し、PolisherがOpen XMLで段落スタイルや禁則を整える三段構えで、人手の細かなレイアウト調整時間を圧縮しつつログで可視化する。
- LibreOffice headlessとPDF Exporterは生成直後にPDF化を試行し、失敗時は再試行やフォールバックテンプレを選ぶ制御を持ち、TeamsやSlack通知に変換結果のメタ情報とハッシュ値を添えて運用部門へ共有する運用像が語られている。
- HITL承認ログには`slide_id`、`actor`、`action`、`timestamp`を必須項目として残し、承認済みスライドをロックして差戻し履歴を保持し、次回レビューや監査でのトレーサビリティと作業コスト削減を両立させる狙いがある。
- Approval-Firstポリシーでは作業開始前にPlan承認とToDoチェックリスト更新、ドキュメント連携を義務化し、PRやコミットに承認メッセージIDを記録して意思決定の透明性を確保し、棚卸し時の説明責任と再開判断を明確化している。
- ロードマップはRM-001〜RM-043などテーマをステージ別に整理し、完了・保留・未着手ステータスを明示して投資優先度を可視化し、`docs/todo/`のタスクと相互リンクすることで現場計画と戦略方針を接続する仕組みになっている。
- `samples/`のゴールデンデータとCLI統合テスト、ハッシュベースのバイナリ検証、`uv run --extra dev pytest`による自動テストを組み合わせ、テンプレ改修やAIモデル更新時の品質退行を検知し、必要に応じてdocs/qaやnotesに結果を記録して知見を蓄積する守りの体制が整っている。
- Stage1のテンプレ準備では命名整合性チェッカーや資産監査パイプラインを整備し、テンプレ差分を継続検証しながらブランド別のゴールデンテンプレをバージョン管理する基礎体力を築いている。
- Stage2のテンプレ構造抽出では`extract-template` CLIでレイアウトID・プレースホルダ・ヒント情報をJSON化し、Analyzerの構造監査と互換レポート生成に直結するデータ基盤を提供している。
- Stage3のコンテンツ正規化はAIレビューでA/B/C評価と改善提案を出し、承認者が差戻しや部分承認を選べるUIとログ仕様を揃え、`content_approved.json`として後続に引き渡す。
- Stage4のドラフト構成設計では章レーンやページ遷移を人が調整し、レイアウトヒントと付録送りの判断を残した`draft_approved.json`を作成し、Analyzerのドラフト評価ダッシュボードやハイブリッドAI構想と連携させる。
- Stage5のマッピングはテンプレ構造と承認済みデータを突合し、縮約→分割→付録送りというフォールバック階段を実装し、`rendering_ready.json`と`mapping_log.json`で決定理由を可視化する。
- Stage6のレンダリングではpython-pptxを用いた自動生成と軽量整合チェックを組み合わせ、Open XMLベースのPolisherに引き継ぎやすい構造と`rendering_log.json`を整備している。
- フォールバック戦略としてスライド分割や要約差替え、付録退避をテンプレレイアウトの収容力とブランド要件に応じて自動選択し、失敗時には再レンダリング指示と通知が飛ぶように計画されている。
- Analyzerが検知する問題は重大度と修正案付きで`analysis.json`へ記録され、RefinerのAuto-fix候補と人による承認履歴を連動させて継続的改善の材料にする。
- 北極星指標では月次120件の提案書を自動生成し手戻り率10%以下を狙い、ロードマップの優先順位や機能投資をこの指標に紐付けて検討している。
- 品質指標としてクリティカルissue平均0.5件以下、効率指標として30スライドを60秒以内出力、運用指標として失敗ジョブの再実行5分以内を掲げ、開発・運用双方が同じゴールを追う。
- 監査ログは入力JSON、テンプレバージョン、生成ハッシュ、処理時間、Auto-fix結果を含み、失敗時の原因と再実行手順も記録して情報システム監査に耐える証跡を残す。
- システム全体はアウトライン生成→バリデーション→レンダリング→診断→仕上げ→出力というパイプラインで、CLI・REST API・キュー駆動バッチの三形態を視野に入れている。
- Service-A OutlinerはLLMや社内モデルから章立てとメッセージングを抽出し、Story Modelerの知見を活かして業界別テンプレセットへマッピングしやすい構造化JSONを渡す。
- Service-B Validatorはpydanticベースのスキーマ検証に加え、禁則処理や表記揺れ、数値整合性をチェックし、HITLが承認時に参照できる修正候補を添える。
- Service-C Rendererはpython-pptxとPillowを組み合わせ、ブランドフォントと余白設定を`config/branding.json`から読み取り、アンカー名維持や複数段落レベルの整形を担う。
- Service-D AnalyzerはOpen XMLを解析して図形位置・サイズ・段落属性を収集し、コントラストや階層ジャンプなどの違反をスコア化して`analysis.json`と可視化ダッシュボードへ送る。
- Service-D RefinerはAnalyzer結果をもとに自動補正ルールを適用し、安全に調整可能な位置スナップやフォント引き上げ、配色統一を段階的に実施してログ化する。
- Service-E Polisherは.NET 8とOpen XML SDKで段落スタイルや禁則を仕上げ、python-pptxでは難しい細部調整を補完し、最終出力のブランド整合性を高める。
- Service-F PDF ExporterはLibreOffice CLIをラップし、フォント埋め込みや透過画像の再現性を検証し、失敗時にはログと再試行キューを吐き出す安全装置を備える。
- Service-G Distributorはストレージへの保存、メタ情報の登録、TeamsやSlack通知を扱い、保存URLとファイルハッシュ、生成時間を運用チームへ共有する。
- データフローでは`layouts.jsonl`、`content_approved.json`、`draft_approved.json`、`rendering_ready.json`といった中間ファイルが互いに整合し、承認ログや解析ログとトレーサブルに紐付く。
- テンプレ構造解析CLIはレイアウトごとのプレースホルダ座標、テキストヒント、使用推奨シナリオを出力し、Stage3〜5の判断材料として使われる。
- ブランド設定は`config/branding.json`で配色・フォント・フォールバック段落スタイルを宣言し、テンプレ側の色変更ではなく設定側で統制する設計思想が徹底されている。
- テンプレートはpptx形式でのみ取り扱い、受け渡し時のメタ情報（作成者・ブランド・バージョン・レビュー日）をJSONに保存し、互換レポート生成で差分を追跡する。
- テンプレ差分検出ではレイアウトやプレースホルダの変更点をAnalyzerで比較し、互換性警告や代替案を通知してテンプレ更新のリスクを可視化する。
- ゴールデンサンプルPPTXは互換テストやリグレッションチェックで再利用し、`samples/templates`配下に配置された資産を保守する運用ルールが定められている。
- `docs/notes`にはロードマップ更新や設計検討の議事録がまとまり、ステークホルダーへの説明や歴史的背景を掘り起こす際の情報源になっている。
- `docs/runbooks`はリリースやサポート、Analyzer運用など現場オペレーションの手順を記録し、突発対応時のフォールバック策を共有する。
- `docs/qa`には品質保証観点やテスト戦略が整理され、統合テストの使い分けやバイナリ差分検証の基準を開発者とQAが共有できる。
- `docs/policies`はタスク管理やApproval-First、機微情報の扱いをまとめ、開発プロセスとセキュリティ要件を明文化している。
- `docs/roadmap/roadmap.md`は大項目ごとの進捗とステータスを管理し、テーマとToDoの紐付け、意思決定の記録、投資判断の根拠を示す基準書となっている。
- ToDoは`docs/todo/YYYYMMDD-*.md`形式で作成し、ロードマップ番号や関連Issue、工程チェックリストを記入し、Plan承認やPR作成のトリガーとして活用される。
- Approval-First Development Policyは`docs/policies/task-management.md`に詳細があり、Plan→承認→実装→テスト→ドキュメント更新→PRという流れを明確に縛っている。
- ブランチ命名は`feat|fix|chore|docs/<slug>`を推奨し、mainへの直接push禁止とConventional Commitsの徹底で履歴の追跡性とレビュー効率を高めている。
- コミットメッセージは`type(scope): subject`形式を守り、PR説明には目的・背景・テスト結果・ロールバック手順・関連ToDoを記載するルールが課されている。
- テスト戦略では`uv run --extra dev pytest`で単体・統合テストをまとめて実行し、CLI統合テストを選択的に走らせる手順や出力ディレクトリ確認が求められている。
- CLI統合テストは`samples/`のデータを活用し、生成されたPPTXやPDFの差分をハッシュやメタ情報で検証することでバイナリ比較の脆弱性を回避する。
- Pythonコードは`ruff`、`black --check`、`mypy`で静的解析を行い、CIやローカルで品質を維持し、未導入の場合は`uv tool run --package`で単体実行できるように案内している。
- C#コンポーネントは`dotnet format`でコード整形を統一し、Open XML SDKベースのPolisherを複数メンバーで保守してもスタイル差分が生じないようにする。
- シェルスクリプトが関わる場合は`shellcheck`を適用し、CIでの失敗を予防するとともに運用スクリプトの堅牢性を確保する文化がある。
- AIレビュー支援は承認前にグレードと改善提案、Auto-fix案を提示し、承認者が採否を判断した結果をログに残して学習データとして蓄積する。
- Auto-fixの適用や却下は監査ログに記録され、後から再生して判断根拠を確認でき、AI改善にフィードバックする仕組みを意識している。
- HITL承認UIは部分承認や差戻し、コメント記録を想定し、段階的に承認フローをロックしながらも柔軟な分割・結合操作を可能にする。
- 承認ゲートはStage3とStage4に配置され、承認済みスライドをロックしつつ差分生成を許可し、再レビュー時に変更点だけを確認できるようにしている。
- 章レーン構成データはCLIやAPIで操作でき、人が調整したドラフトを再利用しやすくするためにテンプレ側のレイアウトセットと紐付けて保管される。
- コンテンツ正規化ではテキスト、表、画像メタ情報をまとめ、ValidatorとAnalyzerの指摘を踏まえたHITL判断で最適な素材を確定する。
- RM-005プレゼンストーリーモデラーは業界別ストーリー基盤を整備し、アウトライン生成とドラフト構成設計で再利用される知識資産を生み出した。
- RM-039コンテンツ多形式インポートではテキスト・Markdown・表データなど複数形式の素材を正規化し、Stage3で取り込めるように拡張された。
- RM-042情報ギャップインテリジェンスは未着手テーマとして残り、コンテンツの不足箇所や外部データ参照をAIが示す未来像が描かれている。
- RM-041レイアウト生成AIとHITLのハイブリッドは未着手だが、AIが候補レイアウトを提示し承認者が選択するワークフローを検討中である。
- RM-003ビジュアルフィードバックコパイロットやRM-006ライブ共同編集アシストは保留扱いで、将来的な協働作業支援の道筋として議事録に残る。
- RM-016テンプレート命名整合性チェッカーやRM-021テンプレ資産監査パイプラインなどStage1の成果がテンプレ品質の土台を固めている。
- RM-022レイアウト解析検証強化やRM-028Analyzer構造抽出差分連携はStage2での自動点検を支え、テンプレ更新時のリスクを早期検知する。
- RM-023コンテンツ承認オーサリング基盤とRM-029Analyzer Review Engine連携はStage3のHITL体験を支える柱として完了済み扱いになっている。
- RM-024ドラフト構成承認フロー整備とRM-036ドラフト構成インテリジェンス拡張がStage4の判断支援を高め、未着手のRM-030ダッシュボード構想につながる。
- Analyzerテンプレ監査メトリクス整備やテンプレートパターン拡充などStage1/2の完了項目が後続工程の品質データを底支えする。
- `docs/design/20251019-stage3-4-cli.md`などの設計資料はHITL工程のCLI要件や画面遷移、ログ仕様を掘り下げ、エージェント実装時の指針を与える。
- `docs/design/layout-style-governance.md`はレイアウトとスタイルの統治モデルを整理し、ブランド定義とテンプレ構造の橋渡し役を果たす。
- `docs/requirements/stories`や`stages`配下にはユーザーストーリーと工程別要件が細かく整理され、設計や実装時に参照される。
- 利用者は営業・コンサルの社内メンバーで、夜間自動生成や即時下書き、既存資料の自動診断など複数のユースケースを想定している。
- 入力は案件情報や画像・表データで、JSON仕様にレイアウトや文章、図表、画像設定が含まれ、テンプレアンカーと照合できるよう設計されている。
- 出力はPPTXが必須、PDFは任意、解析レポートや監査ログも生成され、通知システムへの連携を想定する。
- 通知はTeamsやSlackをターゲットに、生成ファイルのURLとメタ情報、失敗時の再実行手順を併記する計画が述べられている。
- ストレージにはファイルハッシュやテンプレバージョンを付与し、再生成時に同一性検証や差分追跡ができる。
- エラー発生時は原因と再実行手順をログに残し、再試行オーケストレーションが5分以内に再開できるように設計されている。
- 監視と通知はAnalyzerの重大度集計やジョブリトライ状況を可視化し、運用チームがボトルネックを把握できるようにする。
- 監査ログは長期保管と再生を想定し、承認結果やAuto-fix履歴、テンプレバージョンを紐付けて外部監査にも耐える。
- セキュリティ面では機微情報を含むブランド設定や案件データを公開リポジトリに置かない方針が徹底され、匿名化サンプルで検証する。
- APIキーなどの認証情報は環境変数経由で読み込み、ドキュメントに前提条件を明記して秘密情報の漏洩を防ぐ。
- `docs/policies/config-and-templates.md`にはテンプレ変更時の理由と影響を記録し、フォールバック手順を`docs/runbooks`に追記する運用が求められる。
- テンプレートで利用するアンカー名はJSONの`anchor`と一致させ、ズレがある場合はRendererで描画できないリスクを回避する。
- レイアウトヒントや配置パラメータはテンプレ抽出結果に含まれ、Stage5のマッピング判断やスライド収容のシミュレーションに活用される。
- メディアヒントやテキストヒントはテンプレートの使用想定を示し、コンテンツ正規化時の配置判断やFallback戦略の優先度付けに役立つ。
- テーブル生成はテンプレ側のプレースホルダとブランドスタイルに合わせ`python-pptx`で描画し、Analyzerがセル余白やフォントサイズを検知して補正する。
- チャート描画は将来的な拡張として検討され、テンプレートのチャートプレースホルダとJSONのデータ系列を突合する設計案が議論されている。
- 画像やアイコンは配置アンカーのサイズと縦横比を参照し、Rendererがリサイズ、Analyzerが伸縮率をチェックする二重構えを目指している。
- PDF配布ではLibreOffice変換の再現性やフォント埋め込みを監視し、失敗時の再試行と通知、ログ記録をセットで扱う。
- 外部API連携を見据えたJSON仕様はRESTエンドポイントとの親和性が高く、将来的にWebサービス化する際のインターフェースとしても機能する。
- REST API化の構想ではCLIと共通のコアロジックを再利用し、ジョブキューとストレージ通知を組み合わせたSaaS展開が議論されている。
- キュー駆動バッチ運用では夜間ジョブをワーカーへ配分し、失敗したスライドだけ再処理する差分リラン戦略が検討されている。
- スケーラビリティを確保するため、テンプレ解析やレンダリング処理をマイクロサービス化し、水平スケールで120件/月の要件を達成する。
- パフォーマンスチューニングではpython-pptxのボトルネック計測やOpen XML SDKでの差分更新、LibreOfficeのヘッドレス起動コスト削減が課題に挙がっている。
- リソース管理ではLibreOfficeや.NET CLIのプロセス管理、キャッシュディレクトリ設定、`UV_CACHE_DIR=.uv-cache`による権限エラー回避をドキュメント化している。
- 開発者オンボーディングでは`docs/AGENTS.md`でディレクトリごとのルールを案内し、セットアップからテスト、ドキュメント更新までの手順を一覧できる。
- ツールチェーンはPython3.12、uv、.NET 8 SDK、LibreOffice、Open XML SDKを前提にし、必要なバージョンと確認コマンドがセットアップガイドに列挙されている。
- ローカルキャッシュは`UV_CACHE_DIR`環境変数で作業ツリー内へ切り替え、サンドボックス環境での権限問題を避ける手筋が共有される。
- CLIエントリーポイントは`uv run --help`で認識チェックし、サブコマンドやオプションの自動テストと合わせてドキュメント整備を行う。
- 開発プロセスではテスト結果と出力ディレクトリの確認をPR前に必須とし、必要なログや生成物を`docs/`へ記録して再現性を担保する。
- プロジェクト全体はAIと人の協働で提案資料の品質と生産性を両立し、社内提案活動のスピードとブランド価値を同時に押し上げるビジョンを掲げる。
- 未来像としては自動生成されたドラフトが即座にレビュー対象へ流れ、AIとHITLが循環的に改善を繰り返し、120件/月の提案を高品質に届ける運用文化を根付かせることが最終ゴールとされている。
